.\"  $NiH: image.mdoc,v 1.6 2002/10/16 11:23:04 dillo Exp $
.\"
.\"  image.mdoc -- documentation of image handling functions
.\"  Copyright (C) 2002 Dieter Baron
.\"
.\"  This file is part of img2eps, an image to EPS file converter.
.\"  The author can be contacted at <dillo@giga.or.at>
.\"
.\"  Redistribution and use in source and binary forms, with or without
.\"  modification, are permitted provided that the following conditions
.\"  are met:
.\"  1. Redistributions of source code must retain the above copyright
.\"     notice, this list of conditions and the following disclaimer.
.\"  2. Redistributions in binary form must reproduce the above copyright
.\"     notice, this list of conditions and the following disclaimer in
.\"     the documentation and/or other materials provided with the
.\"     distribution.
.\"  3. The name of the author may not be used to endorse or promote
.\"     products derived from this software without specific prior
.\"     written permission.
.\" 
.\"  THIS SOFTWARE IS PROVIDED BY DIETER BARON ``AS IS'' AND ANY EXPRESS
.\"  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\"  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\"  ARE DISCLAIMED.  IN NO EVENT SHALL DIETER BARON BE LIABLE FOR ANY
.\"  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\"  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
.\"  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\"  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
.\"  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\"  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
.\"  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.de BF
. Bd -filled -offset indent
..
.de EF
. Ed
. Pp
..
.Dd October 15, 2002
.Dt "IMAGE HANDLING" 3
.ds vT img2eps Internal Documentation
.Sh NAME
.Nm "IMAGE HANDLING"
.Sh INTROUCTION
.Pp
This module provides a common interface to all supported image
formats.  Support for image transformations (colour space, depth,
size) is also provided (although not all of it is implemented yet).
.Pp
It is composed of one back end for each supported image format
.Fa ( im_FORMAT.c ) ,
one module for image transformation
.Fa ( im_convert.c )
and some format independent functions
.Fa ( image.c ) .
.Pp
Unless otherwise noted, an exception is thrown when an error occurs.
.Pp
Methods are supposed to be implemented by each back end, called
.Fa FORMAT_NAME .
.Pp
[XXX: Return values differ for some functions; this will be fixed.]
.Sh FUNCTIONS AND METHODS
.Pp
FUNCTION
.Ft image *
.Fn image_convert "image *im" "const image_info *i"
.BF
Convert image
.Fa im
to parameters specified in
.Fa i .
If the image does not support all requested transformations directly,
a conversion image object is created and returned.
.EF
METHOD
.Ft void
.Fn image_close "image *im"
.BF
Close and free image
.Fa im .
.EF
FUNCTION
.Ft const char *
.Fn image_compression_name "image_compression cmp"
.BF
Return name of compression method
.Fa cmp
as string.
.EF
FUNCTION
.Ft image_compression
.Fn image_compression_num "const char *cmpn"
.BF
Return compression method named
.Fa cmpn .
.EF
FUNCTION
.Ft int
.Fn image_cspace_components "const image_cspace *cs" "int base"
.BF
Return the number of components used for colour space
.Fa cs .
If it is of type
.Dv IMAGE_CS_INDEXED
and
.Fa base
is non-zero, return the number of components used for the base colour
type.
.EF
FUNCTION
.Ft int
.Fn image_cspace_diffs "const image_cspace *cst" "int mask" "const image_cspace *css"
.BF
Return a mask describing the colour space members included in
.Fa mask
that are set to different values in
.Fa css
and
.Fa cst .
These are the members that need to be converted to make
.Fa cst
conform to the colour space specified by
.Fa css
and
.Fa mask .
.EF
FUNCTION
.Ft void
.Fn image_cspace_merge "image_cspace *cst" "int mask" "const image_cspace *css"
.BF
Set the colour space members included in
.Fa mask
in
.Fa cst
to their respective values in
.Fa css .
.EF
FUNCTION
.Ft int
.Fn image_cspace_palette_size "const image_cspace *cspace"
.BF
Return the size of the palette for colour space
.Fa cspace .
This is the number of bytes returned by
.Fn image_get_palette .
.EF
FUNCTION
.Ft const char *
.Fn image_cspace_name "image_cs_type cs"
.BF
Return name of colour space type
.Fa cs
as string.
.EF
FUNCTION
.Ft image_cs_type
.Fn image_cspace_num "const char *csn"
.BF
Return colour space type named
.Fa csn .
.EF
METHOD
.Ft char *
.Fn image_get_palette "image *im"
.BF
Get palette of image as a row of samples.
.Pp
The returned string remains valid until the next call to
.Fn image_close
or
.Fn image_get_palette
on the same image.  It must not be modified or freed.
.Pp
Returns pointer to palette on success.
.EF
FUNCTION
.Ft int
.Fn image_get_row_size "const image *im"
.BF
Return the size of one row of image data for
.Fa im .
This is the number of bytes returned by
.Fn image_read .
.EF
FUNCTION
.Ft int
.Fn image_info_mask "const image_info *cs"
.BF
Return a mask including all colour space members that are set to
values other than `unknown' or 0 in
.Fa cs .
.EF
FUNCTION
.Ft char *
.Fn image_info_print "const image_info *i"
.BF
Return a string representation of
.Fa i
suitable to display an image info to the user.
.Pp The returned string is static and valid until the next call to
.Fn image_info_print .
.EF
FUNCTION
.Ft void
.Fn image_init_info "image_info *i"
.BF
Set all members of
.Fa i
to `unknown'.
.EF
FUNCTION
.Ft image *
.Fn image_open "char *fname"
.BF
Open image file
.Fa fname .
.Pp
Returns pointer to image.
.EF
METHOD
.Ft int
.Fn image_raw_read "image *im" "char **bp"
.BF
Read next chunk of raw (compressed) image data and point
.Fa bp
at it.
.Pp
The returned string remains valid until the next call to
.Fn image_close ,
.Fn image_raw_read ,
or
.Fn image_raw_read_finish
on the same image.  It must not be modified or freed.
.Pp
Returns number of bytes read or 0 after all data has been read.
.Pp
If a back end does not support raw reading, it should define
.Dv NOSUPP_RAW
and omit this method.
.EF
METHOD
.Ft void
.Fn image_raw_read_finish "image *im" "int abortp"
.BF
Finish reading raw image data.  If
.Fa abortp
is non-zero, image might not have been read compiletely.  This method
must not be called when raw reading is not in progress.
.Pp
If a back end does not support raw reading, it should define
.Dv NOSUPP_RAW
and omit this method.
.EF
METHOD
.Ft void
.Fn image_raw_read_start "image *im"
.BF
Prepare to read raw (compressed) image data.
.Pp
This method must be called before calls to
.Fn image_raw_read .
Reading of raw and uncompressed image data must not be interleaved.
.Pp
If the image's compression is
.Dv IMAGE_CMP_NONE ,
this method must not be called.
.Pp
If a back end does not support raw reading, it should define
.Dv NOSUPP_RAW
and omit this method.
.EF
METHOD
.Ft int
.Fn image_read "image *im" "char **bp"
.BF
Read one row of image data and point
.Fa bp
at it.
.Pp
The returned string remains valid until the next call to
.Fn image_close ,
.Fn image_read ,
or
.Fn image_read_finish
on the same image.  It must not be modified or freed.
.Pp
Returns number of bytes read or 0 after the last row has been read.
[XXX: Most back ends always return 0 and rely on the caller to count
rows.  This should be fixed.]
.EF
METHOD
.Ft void
.Fn image_read_finish "image *im" "int abortp"
.BF
Finish reading image data.  If
.Fa abortp
is non-zero, image might not have been read compiletely.
.EF
METHOD
.Ft void
.Fn image_read_start "image *im"
.BF
Start reading image data.  Must be called before calls to
.Fn image_read .
Reading of raw and uncompressed image data must not be interleaved.
.EF
METHOD
.Ft int
.Fn image_set_cspace "image *im" "int mask" "const image_cspace *cspace"
.BF
Request conversion of image data to the format specified in
.Fa cspace .
If not all parameter changes are supported, change those that are.
Parameters not included in
.Fa mask
are left unchanged or set to default values derived from other
parameteres (if that is neccessary to support all specified
parameters.)
.Pp
Returns 0 if all parameters supported, \-1 otherwise.  For images of
type
.Fa im_convert ,
an exception is thrown if not all specified parameters are supported.
.Pp
If no colour space conversion is supported by a back end, it should define
.Dv NOSUPP_CSPACE
and omit this method.
.EF
METHOD
.Ft int
.Fn image_set_size "image *im" "int width" "int height"
.BF
Request that image be scaled to
.Fa width
x
.Fa height
pixels.
.Pp
Returns 0 if transformation supported, \-1 otherwise.  For images of
type
.Fa im_convert ,
an exception is thrown if the transformation is not supported.
.Pp
If scaling is not supported by a back end, it should define
.Dv NOSUPP_SCALE
and omit this method.
.EF
